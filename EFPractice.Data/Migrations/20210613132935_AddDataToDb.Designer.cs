// <auto-generated />
using EFPractice.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EFPractice.Data.Migrations
{
    [DbContext(typeof(FileDbContext))]
    [Migration("20210613132935_AddDataToDb")]
    partial class AddDataToDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("sch")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EFPractice.Core.Entities.AudioFiles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Bitrate")
                        .HasColumnType("int");

                    b.Property<int>("ChannelCount")
                        .HasColumnType("int");

                    b.Property<string>("Duration")
                        .HasMaxLength(128)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("Duration");

                    b.Property<int>("SampleRate")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("FK_AudioFilesId")
                        .IsClustered();

                    b.ToTable("AudioFiles", "sch");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Bitrate = 700,
                            ChannelCount = 1,
                            Duration = "3m",
                            SampleRate = 44100
                        },
                        new
                        {
                            Id = -2,
                            Bitrate = 700,
                            ChannelCount = 2,
                            Duration = "5m",
                            SampleRate = 44100
                        });
                });

            modelBuilder.Entity("EFPractice.Core.Entities.Directories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ParentDirectoryId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("Title");

                    b.HasKey("Id")
                        .HasName("PK_DirectoriesId")
                        .IsClustered();

                    b.HasAlternateKey("ParentDirectoryId")
                        .HasName("AK_DirectoriesParentId");

                    b.ToTable("Directories", "sch");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ParentDirectoryId = 1,
                            Title = "D"
                        },
                        new
                        {
                            Id = 2,
                            ParentDirectoryId = 2,
                            Title = "C"
                        });
                });

            modelBuilder.Entity("EFPractice.Core.Entities.DirectoryPermission", b =>
                {
                    b.Property<int>("DirectoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CanRead")
                        .HasColumnType("bit");

                    b.Property<bool>("CanWrite")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("DirectoryId");

                    b.ToTable("DirectoryPermissions");

                    b.HasData(
                        new
                        {
                            DirectoryId = 1,
                            CanRead = true,
                            CanWrite = true,
                            UserId = 1
                        },
                        new
                        {
                            DirectoryId = 2,
                            CanRead = true,
                            CanWrite = false,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("EFPractice.Core.Entities.FilePermission", b =>
                {
                    b.Property<int>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CanRead")
                        .HasColumnType("bit");

                    b.Property<bool>("CanWrite")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("FileId");

                    b.ToTable("FilePermissions");

                    b.HasData(
                        new
                        {
                            FileId = 1,
                            CanRead = true,
                            CanWrite = false,
                            UserId = 1
                        },
                        new
                        {
                            FileId = 2,
                            CanRead = true,
                            CanWrite = true,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("EFPractice.Core.Entities.Files", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DirectoryId")
                        .HasColumnType("int");

                    b.Property<string>("Extension")
                        .HasMaxLength(128)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("Extention");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("Title");

                    b.HasKey("Id")
                        .HasName("PK_Files")
                        .IsClustered();

                    b.HasAlternateKey("DirectoryId")
                        .HasName("FK_DirectoriesID");

                    b.ToTable("Files", "sch");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DirectoryId = 1,
                            Extension = ".png",
                            Title = "Image"
                        },
                        new
                        {
                            Id = 2,
                            DirectoryId = 2,
                            Extension = ".pdf",
                            Title = "Book"
                        });
                });

            modelBuilder.Entity("EFPractice.Core.Entities.ImageFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("FK_ImageFilesId")
                        .IsClustered();

                    b.ToTable("ImageFile", "sch");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Height = 100,
                            Width = 100
                        },
                        new
                        {
                            Id = -2,
                            Height = 150,
                            Width = 150
                        });
                });

            modelBuilder.Entity("EFPractice.Core.Entities.TextFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasMaxLength(128)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("Content");

                    b.HasKey("Id")
                        .HasName("FK_TextFilesId")
                        .IsClustered();

                    b.ToTable("TextFiles", "sch");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Content = "TextFileContent1"
                        },
                        new
                        {
                            Id = -2,
                            Content = "TextFileContent2"
                        });
                });

            modelBuilder.Entity("EFPractice.Core.Entities.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("Email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("Name");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(128)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("PasswordHash");

                    b.HasKey("Id")
                        .HasName("PK_UsersId")
                        .IsClustered();

                    b.ToTable("Users", "sch");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "newEmail1@gmail.com",
                            Name = "User1",
                            PasswordHash = "$2a$11$3hhRIl5fwk0D0P5gb8mBhOGOjMbM.YT4RqbA64dPwd6ps5rBCzuYS"
                        },
                        new
                        {
                            Id = 2,
                            Email = "newEmail2@gmail.com",
                            Name = "User2",
                            PasswordHash = "$2a$11$3hhRIl5fwk0D0P5gb8mBhOGOjMbM.YT4RqbA64dPwd6ps5rBCzuYS"
                        });
                });

            modelBuilder.Entity("EFPractice.Core.Entities.VideoFiles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Duration")
                        .HasMaxLength(128)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("Duration");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("FK_VideoFilesId")
                        .IsClustered();

                    b.ToTable("VideoFiles", "sch");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Duration = "1h34m",
                            Height = 1920,
                            Width = 1080
                        },
                        new
                        {
                            Id = -2,
                            Duration = "3h20m",
                            Height = 1920,
                            Width = 1080
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
